generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  isTwoFactorEnabled Boolean?     @default(false)
  twoFactorSecret    String?
  accounts           Account[]
  passwords          Password[]
  secureNotes        SecureNote[]
  sessions           Session[]
  createdTags        Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Password {
  id          String            @id @default(cuid())
  title       String
  username    String
  password    String
  url         String?
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  isFavorite  Boolean           @default(false)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  history     PasswordHistory[] @relation("PasswordHistoryEntries")
  tags        Tag[]             @relation("PasswordTags")

  @@index([userId])
  @@index([userId, isFavorite])
  @@index([userId, createdAt])
}

model Tag {
  id        String     @id @default(cuid())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwords Password[] @relation("PasswordTags")

  @@unique([userId, name])
  @@index([userId])
}

model PasswordHistory {
  id                String   @id @default(cuid())
  passwordEntryId   String
  encryptedPassword String
  createdAt         DateTime @default(now())
  password          Password @relation("PasswordHistoryEntries", fields: [passwordEntryId], references: [id], onDelete: Cascade)

  @@index([passwordEntryId])
  @@index([passwordEntryId, createdAt])
}

model SecureNote {
  id        String   @id @default(cuid())
  title     String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, updatedAt])
}
