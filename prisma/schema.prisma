generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  passwords     Password[]
  twoFactorSecret String?
  isTwoFactorEnabled Boolean? @default(false)
  createdTags        Tag[] // Relation to tags created by the user
  secureNotes        SecureNote[] // Relation to secure notes
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Password {
  id        String   @id @default(cuid())
  title     String
  username  String
  password  String
  url       String?
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  history   PasswordHistory[] @relation("PasswordHistoryEntries") // Relation to password history entries
  tags      Tag[]             @relation("PasswordTags")       // Explicitly named relation
  isFavorite Boolean          @default(false)

  @@index([userId])
  @@index([userId, isFavorite]) // For querying/sorting favorites
  @@index([userId, createdAt])  // Suggested new index
}

model Tag {
  id        String     @id @default(cuid())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwords Password[] @relation("PasswordTags") // Explicitly named relation

  @@unique([userId, name]) // Ensure tag names are unique per user
  @@index([userId])
}

model PasswordHistory {
  id                String   @id @default(cuid())
  passwordEntryId   String
  encryptedPassword String   // Stores the password as it was at that point in time
  createdAt         DateTime @default(now()) // Timestamp of when this history record was created

  password Password @relation("PasswordHistoryEntries", fields: [passwordEntryId], references: [id], onDelete: Cascade)

  @@index([passwordEntryId])
  @@index([passwordEntryId, createdAt]) // Suggested new index
}

model SecureNote {
  id        String   @id @default(cuid())
  title     String?
  content   String   // Encrypted content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, updatedAt]) // Suggested new index
}